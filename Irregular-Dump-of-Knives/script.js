var colors = ["#fc755d","#d1fedd","#4dffb8", "#e3ff57", "#8d21ff", "#ffe55c", "#ff339d", "#73e3ff", "#ff6f3f", "#ee3fff", "#513fff", "#56ff5f", "#cccfff"];
var colorsDark = ["#68aa14", "#876027", "#016d57", "#2f1d3e", "#4d0840", "#421d1a", "#ff0000", "#214365", "#909000", "#0033cc", "#22dd55", "#000000", "#451188"];
var colorsOminous = ["#ff00ff", "#660066", "#8f00ff", "#ff008f", "#ffbbff", "#660006"];

var defaultBackgroundColor = "#d1fedd"
var defaultTextColor = "#000000"
var defaultButtonColor = "#cccfff"
var defaultButtonTextColor = "#000000"
var defaultOminousColor = "#ff00ff"

var texts = ["wolf", "forest", "boar", "horse", "sheep", "potion", "app", "game", "website", "quarry", "stone", "copper", "uranium", "radiation", "pie", "cat", "car", "box", "dog", "hat", "carrot", "apple", "banana", "orange", "pear", "grape", "watermelon", "winter", "summer", "tree", "pine", "birch", "flower", "tower", "building", "bus", "train", "wheel", "oil", "night", "day", "sun", "moon", "star", "cloud", "rain", "snow", "wind", "hammer", "nail", "wish", "death", "time", "year", "beaker", "bracket", "square", "question", "answer", "pencil", "pen", "paper", "book", "bookshelf", "poison", "lava", "This is a really long text which I just wanted you to be able to see and is very different from the other possible texts generated by this which are single nouns."];

var nameBitsAdjAdj = ["Very", "Highly", "Slightly", "Mildly" ,"Sort of", "Vaguely", "Quite", "Possibly", "Decisively", "Considerably", "Absolutely", "Not at all", "Extremely"];
var nameBitsAdj = ["Irregular", "Fancy", "Great", "Grand", "Happy", "Lucky", "Magnificent", "Nice", "Noble", "Perfect", "Pretty", "Quiet", "Rare", "Unfortunate", "Despicable", "Dangerous", "Dull", "Hated", "Honorable", "Mysterious", "Mystical", "Ridiculous", "Bottomless"];
var nameBitsContainer = ["Dump", "Box", "Chest", "Crate", "Cupboard", "Drawer", "Garbage Pile", "Pool", "Sack", "Stock", "Cave Full", "Pit"];
var nameBitsPluralNoun = ["Birds", "Cats", "Dogs", "Horses", "Pigs", "Sheep", "Winds", "Knives", "Gems", "Coins", "Wands", "Queens", "Forts", "Moons", "Apples", "Clouds", "Time Crystals", "Bears", "Answers", "Bananas", "Knights", "Cattle", "Wheels", "Papers", "Books", "Snows", "Rains", "Oils", "Carrots", "Clubs", "Shovels", "Treasures", "Stones", "Nights", "Years", "Trains", "Nobles", "Oils", "Hammers", "Nails", "Repairs", "Tools", "Maps", "Naps", "Wishes", "Winters", "Times", "Pears", "Pines", "Brackets", "Stencils", "Roots", "Forests", "Towers", "Mushrooms", "Peppers", "Orbs", "Spells", "Wands", "Castles"];

var polygons = ["triangle", "quadrilateral", "pentagon", "hexagon", "heptagon", "octogon", "nonogon", "decagon", "undecagon", "dodecagon", "tridecagon", "tetradecagon", "pentadecagon", "hexadecagon", "heptadecagon", "octodecagon", "ennedecagon", "icosagon", "triacontagon", "tetracontagon", "pentacontagon", "hexacontagon", "heptacontagon", "octacontagon", "enneacontagon", "hectagon", "chiliagon", "myriagon"];

var rps = ["rock", "paper", "scissors"];
//Converts a letter r, p, or s into the full word
var rpsLetters = {
  "r": "rock", 
  "p": "paper", 
  "s": "scissors"
};
//Contains the results of each matchup in rps
//Inner arrays in format [First player choice, second player choice, result]
//0 = tie, 1 = first player wins, -1 = second player wins
var rpsMatchups = [
  ["rock", "rock", 0],
  ["rock", "paper", -1],
  ["rock", "scissors", 1],
  ["paper", "rock", 1],
  ["paper", "paper", 0],
  ["paper", "scissors", -1],
  ["scissors", "rock", -1],
  ["scissors", "paper", 1],
  ["scissors", "scissors", 0],
]

var rps_win_count = 0
var rps_loss_count = 0
var rps_tie_count = 0

//The first level of inner arrays are the levels
//The levels each contain the data of the buttons that are unlocked at that level
//Level 0 is unlocked by default
//Button data in format [Text, On click function, Optional: Is ominous]
var randomButtonLevels = [
  [
    ["Change background color", function() {changeBackgroundColor()}],
    ["Give me a word", function() {makeText()}],
    ["Choose rock, paper, or scissors", function() {makeRps()}],
    ["Do nothing", function() {}],
    ["Make me an egg", function() {makeEgg()}],
    ["Make me a square", function() {makeSquare()}],
  ],
  [
    ["Change text color", function() {changeTextColor()}],
    ["Make seven buttons", function() {for(i = 0; i < 7; i++){makeButton()}}],
    ["Play RPS", function() {playRps()}],
    ["Make three words", function() {for(i = 0; i < 3; i++){makeText()}}],
    ["Make me a name", function() {makeName()}],
    ["Make me a triangle", function() {makeTriangle()}],
    ["What are eggs?", function() {defineEgg()}],
  ],
  [
    ["Change button color", function() {changeButtonColor()}],
    ["Change button text color", function() {changeButtonTextColor()}],
    ["Make ten eggs", function() {for(i = 0; i < 10; i++){makeEgg()}}],
    ["Make five names", function() {for(i = 0; i < 5; i++){makeName()}}],
    ["Choose rock, paper, or scissors five times", function() {for(i = 0; i < 5; i++){makeRps()}}],
    ["Make me a line", function() {makeLine()}],
    
  ],
  [
    ["Change ominous color", function() {changeOminousColor()}],
    ["Make 20 buttons", function() {for(i = 0; i < 20; i++){makeButton()}}],
    ["Make 50 eggs", function() {for(i = 0; i < 50; i++){makeEgg()}}],
    ["Make me a polygon", function() {makePolygon()}],
    ["Play 10 games of RPS", function() {for(i = 0; i < 10; i++){playRps()}}],
    ["Make 14 words", function() {for(i = 0; i < 14; i++){makeText()}}],
  ],
  [
    ["Make me a shape button", function() {makeShapeButton()}],
    ["Name an egg", function() {nameEgg()}],
  ],
  [
    ["R e s e t", function() {reset()}, true],
  ]
];
//All buttons that have been unlocked so far
var unlockedButtons = [];
var currentLevel = 0;
//The button that you start with
var makeSingleButtonButtonData = ["Make me a button", function() {makeButton()}];
//This one is special
var ascendButtonData = ["Ascend", function() {ascend()}, true];

var shapeButtons = [
  ["Make me a square", function() {makeSquare()}], 
  ["Make me a triangle", function() {makeTriangle()}],
  ["Make me a line", function() {makeLine()}],
  ["Make me a polygon", function() {makePolygon()}],
]

var commonEggs = ["big egg", "small egg", "crow egg", "chicken egg", "robin egg", "pigeon egg", "jay egg", "cracked egg", "Easter egg", "snake egg", "grey egg", "gray egg", "scrambled egg", "sunny side up egg", "burnt egg"]; // There are 15

var uncommonEggs = ["parrot egg" ,"bouncy egg", "emu egg", "blue egg", "red egg", "peacock egg", "pheasant egg", "puffin egg", "kingfisher egg", "deviled egg"]; //There are 10

var rareEggs = ["dodo egg", "radioactive egg", "double yolk egg", "shark egg", "dinosaur egg", "caviar", "platypus egg"]; //There are 7

var mythicEggs = [["f","r","a","c","t","a","l"," e","g","g"], ["c","u","b","e"," ","e","","g","","g"], ["tr","ia","n","g","ul","a","r"," e","g","g"], ["he","x","a","g","o","n","al"," e","g","g"], ["d","r","a","g","o","n"," ","e","g","g"]]; //There are 5

//10 colors
var mythicEggColors = ["#ff0000", "#ff8800", "#ffff00", "#00ff00", "#00ff88", "#00ffff", "#0088ff", "#0000ff", "#8800ff", "#ff00ff"];

var customEggs = []

//All eggs that the player has collected stored in format [Egg, Rarity as int from 0 to 3]
var collectedEggs = []
//Same as array above but without the rarities
var collectedEggNames = []

var buttonsMade = []
var createdButtonCount = 0
var createdTextCount = 0
var buttonTypesMade = []

const root = document.querySelector(':root');

const topBar = document.getElementById("top-bar");

var buttonsMadeLabel
var textMadeLabel
var buttonTypesMadeLabel
var rpsWLTCountsLabel
var eggCollectionLabel

const settings = document.getElementById("settings");

const buttonArea = document.getElementById("button-area");
const randomArea = document.getElementById("randomness-area");

const file_input = document.getElementById("file-input");

const downloadToFile = (content, filename, contentType) => {
  const a = document.createElement('a');
  const file = new Blob([content], { type: contentType });

  a.href = URL.createObjectURL(file);
  a.download = filename;
  a.click();

  URL.revokeObjectURL(a.href);
};

var selectedFile;

// get the value every time the user selects a new file
file_input.addEventListener("change", (e) => {
  // e.target points to the input element
  selectedFile = e.target.files[0]
})

const used_ls_keys = [
  "IDoK_current_level",
  "IDoK_buttons_made",
  "IDoK_created_button_count",
  "IDoK_created_text_count",
  "IDoK_button_types_made",
  "IDoK_random_area_contents",
  "IDoK_rps_wins",
  "IDoK_rps_ties",
  "IDoK_rps_losses",
  "IDoK_custom_eggs",
  "IDoK_collected_eggs",
  "IDoK_collected_egg_names",
  "IDoK_background_color",
  "IDoK_text_color",
  "IDoK_button_color",
  "IDoK_button_text_color",
  "IDoK_ominous_color"
]

var loaded = false

window.onload = newLevel(false)

function newLevel(ascending = true, noButtons = false)
{
  loaded = false

  root.style.setProperty('--background-color', defaultBackgroundColor);
  root.style.setProperty('--text-color', defaultTextColor);
  root.style.setProperty('--button-color', defaultButtonColor);
  root.style.setProperty('--button-text-color', defaultButtonTextColor);
  root.style.setProperty('--ominous-color', defaultOminousColor);

  for(var i in randomButtonLevels[currentLevel])
  {
    unlockedButtons.push(randomButtonLevels[currentLevel][i]);
  }

  buttonsMade = [];
  createdButtonCount = 0;
  createdTextCount = 0;
  buttonTypesMade = [];

  rps_loss_count = 0;
  rps_tie_count = 0;
  rps_win_count = 0;
  
  collectedEggs = [];
  collectedEggNames = [];

  customEggs = [];

  updateTopBarElements();

  updateTopBar();

  buttonArea.innerHTML = "";
  randomArea.innerHTML = "";
  
  if((!localStorage.getItem("IDoK_buttons_made") && !noButtons) || ascending)
  {
    loaded = true;
    makeButton(makeSingleButtonButtonData);
    saveToBrowser();
  }
  else if(!noButtons)
  {
    loadFromBrowser();
  }
}

function ascend()
{
  currentLevel += 1;
  newLevel();
}

function reset()
{
  var do_it = window.confirm("Are you sure?");
  if(do_it)
  {
    do_it = window.confirm("Are you 100% absolutely certain?");
    if(do_it)
    {
      for(var i in used_ls_keys)
      {
        localStorage.removeItem(used_ls_keys[i]);
      }
      newLevel();
      window.alert("You were warned.")
      window.alert("But you kept going.")
      window.alert("Why?")
    }
  }
}

function saveToBrowser()
{
  localStorage.setItem("IDoK_current_level", JSON.stringify(currentLevel));

  var stringifiedButtonsMade = []
  for(var button in buttonsMade)
  {
    button = buttonsMade[button]
    localStorage.setItem("IDoK_button_" + button[0], button[1].toString())
    stringifiedButtonsMade.push(button[0])
  }

  localStorage.setItem("IDoK_buttons_made", JSON.stringify(stringifiedButtonsMade));
  localStorage.setItem("IDoK_created_button_count", JSON.stringify(createdButtonCount));
  localStorage.setItem("IDoK_created_text_count", JSON.stringify(createdTextCount));
  localStorage.setItem("IDoK_button_types_made", JSON.stringify(buttonTypesMade));
  localStorage.setItem("IDoK_random_area_contents", randomArea.innerHTML);

  localStorage.setItem("IDoK_rps_wins", JSON.stringify(rps_win_count));
  localStorage.setItem("IDoK_rps_ties", JSON.stringify(rps_tie_count));
  localStorage.setItem("IDoK_rps_losses", JSON.stringify(rps_loss_count));

  localStorage.setItem("IDoK_custom_eggs", JSON.stringify(customEggs));
  localStorage.setItem("IDoK_collected_eggs", JSON.stringify(collectedEggs));
  localStorage.setItem("IDoK_collected_egg_names", JSON.stringify(collectedEggNames));

  localStorage.setItem("IDoK_background_color", root.style.getPropertyValue('--background-color'));
  localStorage.setItem("IDoK_text_color", root.style.getPropertyValue('--text-color'));
  localStorage.setItem("IDoK_button_color", root.style.getPropertyValue('--button-color'));
  localStorage.setItem("IDoK_button_text_color", root.style.getPropertyValue('--button-text-color'));
  localStorage.setItem("IDoK_ominous_color", root.style.getPropertyValue('--ominous-color'));
}

function loadFromBrowser()
{
  currentLevel = JSON.parse(localStorage.getItem("IDoK_current_level"));

  unlockedButtons = []

  for(var i = 0; i <= currentLevel; i++)
  {
    for(var j in randomButtonLevels[i])
    {
      unlockedButtons.push(randomButtonLevels[i][j]);
    }
  }
  
  var stringifiedButtonsMade = JSON.parse(localStorage.getItem("IDoK_buttons_made"));
  for(var button in stringifiedButtonsMade)
  {
    button = stringifiedButtonsMade[button];
    button = [button, eval("(" + localStorage.getItem("IDoK_button_" + button) + ")")]
    makeButton(button);
  }

  createdButtonCount = JSON.parse(localStorage.getItem("IDoK_created_button_count"));
  createdTextCount = JSON.parse(localStorage.getItem("IDoK_created_text_count"));
  buttonTypesMade = JSON.parse(localStorage.getItem("IDoK_button_types_made"));
  randomArea.innerHTML = localStorage.getItem("IDoK_random_area_contents");

  rps_win_count = JSON.parse(localStorage.getItem("IDoK_rps_wins", JSON.stringify()));
  rps_tie_count = JSON.parse(localStorage.getItem("IDoK_rps_ties", JSON.stringify()));
  rps_loss_count = JSON.parse(localStorage.getItem("IDoK_rps_losses", JSON.stringify()));

  customEggs = JSON.parse(localStorage.getItem("IDoK_custom_eggs", JSON.stringify()));
  collectedEggs = JSON.parse(localStorage.getItem("IDoK_collected_eggs", JSON.stringify()));
  collectedEggNames = JSON.parse(localStorage.getItem("IDoK_collected_egg_names", JSON.stringify()));

  root.style.setProperty('--background-color', localStorage.getItem("IDoK_background_color"));
  root.style.setProperty('--text-color', localStorage.getItem("IDoK_text_color"));
  root.style.setProperty('--button-color', localStorage.getItem("IDoK_button_color"));
  root.style.setProperty('--button-text-color', localStorage.getItem("IDoK_button_text_color"));
  root.style.setProperty('--ominous-color', localStorage.getItem("IDoK_ominous_color"));

  updateTopBarElements();

  loaded = true;
  updateTopBar();
}

function saveToFile()
{
  var buttonsMadeNames = []
  for(var button in buttonsMade)
  {
    button = buttonsMade[button]
    buttonsMadeNames.push(button[0])
  }
  
  // Data which will be written in a file.
  var data = (
      JSON.stringify(currentLevel) + "\n" +
      JSON.stringify(buttonsMadeNames) + "\n" +
      JSON.stringify(createdButtonCount) + "\n" +
      JSON.stringify(createdTextCount) + "\n" +
      JSON.stringify(buttonTypesMade) + "\n" +
      randomArea.innerHTML + "\n" +
      JSON.stringify(rps_win_count) + "\n" +
      JSON.stringify(rps_tie_count) + "\n" +
      JSON.stringify(rps_loss_count) + "\n" +
      JSON.stringify(customEggs) + "\n" +
      JSON.stringify(collectedEggs) + "\n" +
      JSON.stringify(collectedEggNames) + "\n" +
      root.style.getPropertyValue('--background-color') + "\n" +
      root.style.getPropertyValue('--text-color') + "\n" +
      root.style.getPropertyValue('--button-color') + "\n" +
      root.style.getPropertyValue('--button-text-color') + "\n" +
      root.style.getPropertyValue('--ominous-color')
  );

  // Write data in 'Irregular_dump_of_knives_save.txt'
  downloadToFile(data, 'Irregular_dump_of_knives_save.txt', 'text/plain')
}

function loadFromFile()
{
  if (!selectedFile) return;

  localStorage.clear();
  newLevel(false, true);

  loaded = false;

  const reader = new FileReader()
  reader.onload = (e) => {
    // e.target points to the reader
    const textContent = e.target.result
    var data = textContent.split("\n");

    currentLevel = JSON.parse(data[0]);

    unlockedButtons = [];
  
    for(var i = 0; i <= currentLevel; i++)
    {
      for(var j in randomButtonLevels[i])
      {
        unlockedButtons.push(randomButtonLevels[i][j]);
      }
    }
    var buttonsMadeNames = JSON.parse(data[1]);
    buttonsMade = []

    for(var name in buttonsMadeNames)
    {
      name = buttonsMadeNames[name];

      if(name == makeSingleButtonButtonData[0])
      {
        buttonsMade.push(makeSingleButtonButtonData);
        makeButton(makeSingleButtonButtonData);
      }
      else if(name == ascendButtonData[0])
      {
        buttonsMade.push(ascendButtonData);
        makeButton(ascendButtonData);
      }
      else
      {
        for(var button in unlockedButtons)
        {
          button = unlockedButtons[button]

          if(button[0] == name)
          {
            buttonsMade.push(button);
            makeButton(button);
            break;
          }
        }
      }
    }
    createdButtonCount = JSON.parse(data[2]);
    createdTextCount = JSON.parse(data[3]);
    buttonTypesMade = JSON.parse(data[4]);
    randomArea.innerHTML = data[5];
    rps_win_count = JSON.parse(data[6]);
    rps_tie_count = JSON.parse(data[7]);
    rps_loss_count = JSON.parse(data[8]);
    customEggs = JSON.parse(data[9]);
    collectedEggs = JSON.parse(data[10]);
    collectedEggNames = JSON.parse(data[11]);
    root.style.setProperty('--background-color', data[12]);
    root.style.setProperty('--text-color', data[13]);
    root.style.setProperty('--button-color', data[14]);
    root.style.setProperty('--button-text-color', data[15]);
    root.style.setProperty('--ominous-color', data[16]);

    updateTopBarElements();
    
    updateTopBar();
    
    console.log(`The content of ${selectedFile.name} is ${textContent}`)

    saveToBrowser();
    loaded = true;
  }

  reader.onerror = (e) => {
    const error = e.target.error
    console.error(`Error occured while reading ${file.name}`, error)
  }

  reader.readAsText(selectedFile);
}

function updateTopBarElements()
{
  topBar.innerHTML = ""

  buttonsMadeLabel = document.createElement("p");
  topBar.appendChild(buttonsMadeLabel);

  textMadeLabel = document.createElement("p");
  topBar.appendChild(textMadeLabel);

  buttonTypesMadeLabel = document.createElement("p");
  topBar.appendChild(buttonTypesMadeLabel);

  if(currentLevel >= 1)
  {
    rpsWLTCountsLabel = document.createElement("p");
    topBar.appendChild(rpsWLTCountsLabel);
  }

  if(currentLevel >= 2)
  {
    eggCollectionLabel = document.createElement("p");
    topBar.appendChild(eggCollectionLabel);
  }

  var button = document.createElement("button");
  
  button.type = "button";
  button.innerHTML = "Open Settings";
  button.onclick = (() => {openSettings()});
  
  topBar.appendChild(button);
}

function updateTopBar()
{
  buttonsMadeLabel.innerHTML = "Buttons made: " + createdButtonCount
  if(enoughButtonsMade())
  {
    buttonsMadeLabel.style.color = "var(--ominous-color)"
  }
  else
  {
    buttonsMadeLabel.style.color = "var(--text-color)"
  }

  textMadeLabel.innerHTML = "Pieces of text made: " + createdTextCount
  if(enoughTextMade())
  {
    textMadeLabel.style.color = "var(--ominous-color)"
  }
  else
  {
    textMadeLabel.style.color = "var(--text-color)"
  }

  if(buttonTypesMade.length < unlockedButtons.length)
  {
    buttonTypesMadeLabel.style.color = "var(--text-color)"
    buttonTypesMadeLabel.innerHTML = "Button types made: " + buttonTypesMade.length
  }
  else if(buttonTypesMade.length == unlockedButtons.length)
  {
    buttonTypesMadeLabel.style.color = "var(--ominous-color)"
    buttonTypesMadeLabel.innerHTML = "Button types made: All"
  }
  else
  {
    buttonTypesMadeLabel.style.color = "var(--ominous-color)"
    buttonTypesMadeLabel.innerHTML = "Button types made: All?"
  }

  if(currentLevel >= 1)
  {
    rpsWLTCountsLabel.innerHTML = "RPS: Wins = " + rps_win_count + ", Ties = " + rps_tie_count + ", Losses = " + rps_loss_count
    if(playedEnoughRPS())
    {
      rpsWLTCountsLabel.style.color = "var(--ominous-color)"
    }
    else
    {
      rpsWLTCountsLabel.style.color = "var(--text-color)"
    }
  }

  if(currentLevel >= 2)
  {
    eggCollectionLabel.innerHTML = "Eggs Collected: Commons = " + collectedEggCount(0) + "/" + commonEggs.length + ", Uncommons = " + collectedEggCount(1) + "/" + uncommonEggs.length + ", Rares = " + collectedEggCount(2) + "/" + rareEggs.length + ", Mythics = " + collectedEggCount(3) + "/" + mythicEggs.length
    if(currentLevel >= 4)
    {
      eggCollectionLabel.innerHTML += ", Custom = " + collectedEggCount(4) + "/" + customEggs.length
    }
    if(enoughEggsCollected())
    {
      eggCollectionLabel.style.color = "var(--ominous-color)"
    }
    else
    {
      eggCollectionLabel.style.color = "var(--text-color)"
    }
  }

  if(loaded)
  {
    saveToBrowser();
  }
}

function openSettings()
{
  settings.hidden = false;
}

function closeSettings()
{
  settings.hidden = true;
}

function makeButton(buttonToMake = null)
{
  var buttonContainer = document.createElement("div");
  var button = document.createElement("button");
  if(buttonToMake == null)
  {
    buttonToMake = unlockedButtons[Math.floor(Math.random() * unlockedButtons.length)];

    if(canAscend())
    {
      if(Math.random() < 0.15 / ((currentLevel * 2) + 1))
      {
        window.alert("Something special happened.");
        buttonToMake = ascendButtonData;
      }
    }
  }

  if(!buttonTypesMade.includes(buttonToMake[0]) && buttonToMake[0] != makeSingleButtonButtonData[0])
  {
    buttonTypesMade.push(buttonToMake[0]);
  }
  
  buttonContainer.className = "button-container";
  button.type = "button";
  button.innerHTML = buttonToMake[0];
  button.onclick = buttonToMake[1];

  if(buttonToMake.length > 2 && buttonToMake[2])
  {
    button.style.color = "var(--ominous-color)"
  }
  
  buttonArea.appendChild(buttonContainer);
  buttonContainer.appendChild(button);

  buttonsMade.push(buttonToMake);
  createdButtonCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function canAscend()
{
  return enoughButtonsMade() && enoughTextMade() && allButtonTypesMade() && playedEnoughRPS() && (enoughEggsCollected() || currentLevel < 2)
}

function enoughButtonsMade()
{
  return createdButtonCount >= 50 + 100 * Math.log2((currentLevel ** 2) + 1)
}

function enoughTextMade()
{
  return createdTextCount >= 100 + 50 * (currentLevel ** 2)
}

function allButtonTypesMade()
{
  return buttonTypesMade.length >= unlockedButtons.length
}

function playedEnoughRPS()
{
  return rps_loss_count + rps_tie_count + rps_win_count >= 5 * (currentLevel ** 1.6)
}

function enoughEggsCollected()
{
  var allNormalEggsCollected = collectedEggCount(0) == commonEggs.length && collectedEggCount(1) == uncommonEggs.length && collectedEggCount(2) == rareEggs.length && collectedEggCount(3) == mythicEggs.length
  if(currentLevel >= 4)
  {
    return allNormalEggsCollected && collectedEggCount(4) >= customEggs.length && customEggs.length > currentLevel
  }
  else
  {
    return allNormalEggsCollected
  }
}

function changeBackgroundColor()
{
  if(Math.random() < 0.7)
  {
    root.style.setProperty('--background-color', colors[Math.floor(Math.random() * colors.length)]);
  }
  else
  {
    root.style.setProperty('--background-color', colorsDark[Math.floor(Math.random() * colorsDark.length)]);
  }

  if(loaded)
  {
    updateTopBar();
  }
}

function changeTextColor()
{
  if(Math.random() < 0.7)
  {
    root.style.setProperty('--text-color', colorsDark[Math.floor(Math.random() * colorsDark.length)]);
  }
  else
  {
    root.style.setProperty('--text-color', colors[Math.floor(Math.random() * colors.length)]);
  }

  if(loaded)
  {
    updateTopBar();
  }
}

function changeButtonColor()
{
  if(Math.random() < 0.7)
  {
    root.style.setProperty('--button-color', colors[Math.floor(Math.random() * colors.length)]);
  }
  else
  {
    root.style.setProperty('--button-color', colorsDark[Math.floor(Math.random() * colorsDark.length)]);
  }

  if(loaded)
  {
    updateTopBar();
  }
}

function changeButtonTextColor()
{
  if(Math.random() < 0.7)
  {
    root.style.setProperty('--button-text-color', colorsDark[Math.floor(Math.random() * colorsDark.length)]);
  }
  else
  {
    root.style.setProperty('--button-text-color', colors[Math.floor(Math.random() * colors.length)]);
  }

  if(loaded)
  {
    updateTopBar();
  }
}

function changeOminousColor()
{
  if(Math.random() < 0.99)
  {
    root.style.setProperty('--ominous-color', colorsOminous[Math.floor(Math.random() * colorsOminous.length)]);
  }
  else
  {
    root.style.setProperty('--ominous-color', colorsDark[Math.floor(Math.random() * colorsDark.length)]);
  }

  if(loaded)
  {
    updateTopBar();
  }
}

function makeText()
{
  var p = document.createElement("p");
  p.innerHTML = texts[Math.floor(Math.random() * texts.length)];
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makeName()
{
  var p = document.createElement("p");
  var name = "";
  
  if(Math.random() < 0.3)
  {
    name+= nameBitsAdjAdj[Math.floor(Math.random() * nameBitsAdjAdj.length)] + " ";
  }
  
  name+= nameBitsAdj[Math.floor(Math.random() * nameBitsAdj.length)] + " ";
  
  if(Math.random() < 0.3)
  {
    name+= nameBitsContainer[Math.floor(Math.random() * nameBitsContainer.length)] + " of ";
  }
  
  name+= nameBitsPluralNoun[Math.floor(Math.random() * nameBitsPluralNoun.length)];
  
  p.innerHTML = name;
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makeRps()
{
  var p = document.createElement("p");
  p.innerHTML = "I choose " + rps[Math.floor(Math.random() * rps.length)];
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function playRps()
{
  var player_choice
  while(!rps.includes(player_choice))
  {
    player_choice = window.prompt("Choose rock, paper, or scissors").toLowerCase()

    if(player_choice in rpsLetters)
    {
      player_choice = rpsLetters[player_choice]
    }
  }

  var computer_choice = rps[Math.floor(Math.random() * rps.length)]

  var p = document.createElement("p");
  p.innerHTML = "You chose " + player_choice + ", I chose " + computer_choice;
  randomArea.appendChild(p);

  var result;

  for(matchup in rpsMatchups)
  {
    matchup = rpsMatchups[matchup];

    if(matchup[0] == player_choice && matchup[1] == computer_choice)
    {
      result = matchup[2];
      break;
    }
  }

  switch(result)
  {
    case 0:
      rps_tie_count += 1;
      window.alert("It's a tie!")
      break;
    case 1:
      rps_win_count += 1;
      window.alert("You win!")
      break;
    case -1:
      rps_loss_count += 1;
      window.alert("I win!")
      break;
  }

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makeEgg()
{
  var p = document.createElement("p");
  randomArea.appendChild(p);

  var rarity_random_value = Math.random();

  if(rarity_random_value < 0.64 || (rarity_random_value < 0.65 && currentLevel < 4))
  {
    var span = document.createElement("span");
    var egg = commonEggs[Math.floor(Math.random() * commonEggs.length)];
    span.style.color = "#8f350c";
    span.innerHTML = egg;
    p.appendChild(span);

    if(!(collectedEggNames.includes(egg)))
    {
      collectedEggNames.push(egg)
      collectedEggs.push([egg, 0])
    }
  }
  else if(rarity_random_value < 0.65)
  {
    var span = document.createElement("span");
    var egg = customEggs[Math.floor(Math.random() * customEggs.length)];
    span.style.color = "var(--ominous-color)";
    span.innerHTML = egg;
    p.appendChild(span);

    if(!(collectedEggNames.includes(egg)))
    {
      collectedEggNames.push(egg)
      collectedEggs.push([egg, 4])
    }
  }
  else if((rarity_random_value - 0.65) < 0.25)
  {
    var span = document.createElement("span");
    var egg = uncommonEggs[Math.floor(Math.random() * uncommonEggs.length)];
    span.style.color = "#a9cbd0";
    span.innerHTML = egg;
    p.appendChild(span);

    if(!(collectedEggNames.includes(egg)))
    {
      collectedEggNames.push(egg)
      collectedEggs.push([egg, 1])
    }
  }
  else if((rarity_random_value - 0.9) < 0.08)
  {
    var span = document.createElement("span");
    var egg = rareEggs[Math.floor(Math.random() * rareEggs.length)];
    span.style.color = "#f2bd36";
    span.innerHTML = egg;
    p.appendChild(span);

    if(!(collectedEggNames.includes(egg)))
    {
      collectedEggNames.push(egg)
      collectedEggs.push([egg, 2])
    }
  }
  else
  {
    var egg = mythicEggs[Math.floor(Math.random() * mythicEggs.length)];
    for(segmentNumber in egg)
    {
      var span = document.createElement("span");
      span.style.color = mythicEggColors[segmentNumber];
      span.innerHTML = egg[segmentNumber];
      p.appendChild(span);
    }

    var egg_name = ""
    for(var i in egg)
    {
      egg_name += egg[i]
    }

    if(!(collectedEggNames.includes(egg_name)))
    {
      collectedEggNames.push(egg_name)
      collectedEggs.push([egg_name, 3])
    }
  }

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function defineEgg()
{
  var p = document.createElement("p");
  p.innerHTML = "An egg is a noun. It is an object which is created by an animal with the purpose of producing offspring or something that looks similar and is created through similar means as such an object. It is usually vaguely round. Take everything I say with a grain of salt. I'm not an egg expert.";
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function nameEgg()
{
  var p = document.createElement("p");
  var name = "Egg of the ";
  
  if(Math.random() < 0.3)
  {
    name += nameBitsAdjAdj[Math.floor(Math.random() * nameBitsAdjAdj.length)] + " ";
  }
  
  name += nameBitsAdj[Math.floor(Math.random() * nameBitsAdj.length)] + " ";
  
  if(Math.random() < 0.3)
  {
    name += nameBitsContainer[Math.floor(Math.random() * nameBitsContainer.length)] + " of ";
  }
  
  name += nameBitsPluralNoun[Math.floor(Math.random() * nameBitsPluralNoun.length)];

  customEggs.push(name)
  
  p.innerHTML = "Named a new egg!";
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function collectedEggCount(rarity)
{
  var count = 0;

  for(var egg in collectedEggs)
  {
    egg = collectedEggs[egg];

    if(egg[1] == rarity)
    {
      count++
    }
  }

  return count;
}

function makeSquare()
{
  var p = document.createElement("p");
  var numberToSquare = Math.floor(Math.random() * 150)
  p.innerHTML = numberToSquare + " squared is " + (numberToSquare ** 2);
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makeTriangle()
{
  var p = document.createElement("p");
  var numberToTriangle = Math.floor(Math.random() * 150)

  var numberEnding = "th"

  if(numberToTriangle % 100 < 10 || numberToTriangle % 100 > 20)
  {
    if(numberToTriangle % 10 == 1)
    {
      numberEnding = "st"
    }
    else if(numberToTriangle % 10 == 2)
    {
      numberEnding = "nd"
    }
    else if(numberToTriangle % 10 == 3)
    {
      numberEnding = "rd"
    }
  }

  p.innerHTML = "the " + numberToTriangle + numberEnding + " trianglular number is " + (numberToTriangle * (numberToTriangle + 1) / 2);
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makeLine()
{
  var p = document.createElement("p");
  p.innerHTML = "_".repeat(Math.ceil(Math.random() * 50));
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makePolygon()
{
  var p = document.createElement("p");
  p.innerHTML = polygons[Math.floor(Math.random() * polygons.length)];
  randomArea.appendChild(p);

  createdTextCount += 1;

  if(loaded)
  {
    updateTopBar();
  }
}

function makeShapeButton()
{
  makeButton(shapeButtons[Math.floor(Math.random() * shapeButtons.length)])
}